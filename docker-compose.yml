version: '3.4'
 
services:

    reverseproxy:
        image: reverseproxy
        ports:
            - 80:80
            - 443:443
        dns:
            - 10.1.23.20
            - 10.1.23.120
        restart: always
        # map default certificate and dh file for NAS into nginx container
        # for ease of certificate management.
        volumes:
            - /usr/syno/etc/certificate/system/default:/etc/ssl
            - /usr/syno/etc/ssl/dh2048.pem:/etc/ssl/dh2048.pem
 
    sabnzbd:
        depends_on:
            - reverseproxy
        image: linuxserver/sabnzbd:latest
        restart: always
        volumes:
            - /volume3/mediatools/sabnzbd/incomplete-downloads:/incomplete-downloads
            - /volume1/Media:/downloads
            - /volume3/mediatools/sabnzbd/config:/config
        environment:
            - TZ=PST8PDT
            - PUID=1028
            - PGID=65536
 
    sonarr:
        depends_on:
            - reverseproxy
        image: linuxserver/sonarr:latest
        restart: always
        volumes:
            - /volume1/Media:/tv
            - /volume1/Media:/downloads
            - /volume3/mediatools/sonarr:/config
        environment:
            - TZ=PST8PDT
            - PUID=1028
            - PGID=65536
        
    radarr:
        depends_on:
            - reverseproxy
        image: linuxserver/radarr:latest
        restart: always
        volumes:
            - /volume1/Media/Movies:/movies
            - /volume1/Media:/downloads
            - /volume3/mediatools/radarr:/config
        environment:
            - TZ=PST8PDT
            - PUID=1028
            - PGID=65536
        
    moinmoin:
        depends_on:
            - reverseproxy
        image: moinmoin:latest
        restart: always
        volumes:
            - /volume3/mediatools/moin:/moin
        environment:
            - TZ=PST8PDT
            - PUID=1028
            - PGID=65536

    tautulli:
        depends_on:
            - reverseproxy
        image: linuxserver/tautulli:latest
        restart: always
        volumes:
            - /volume1/Plex/Library/Logs:/logs:ro
            - /volume3/mediatools/tautulli:/config
        environment:
            - TZ=PST8PDT
            - PUID=1028
            - PGID=65536

    grafana:
        depends_on:
            - reverseproxy
        image: grafana/grafana
        user: "1030"
        #container_name: grafana
        restart: always
        links:
            - prometheus
        #ports:
        #  - "3000:3000"
        volumes:
            - /volume3/prometheus/configs/grafana.ini:/etc/grafana/grafana.ini
            - /volume3/prometheus/data/grafana:/var/lib/grafana

    prometheus:
        depends_on:
            - reverseproxy
        image: prom/prometheus
        user: "1031"
        #container_name: prometheus
        restart: always
        links:
            - alertmanager
            - node-exporter
        #ports:
        #  - "9090:9090"
        volumes:
            - /volume3/prometheus/configs/prometheus.yml:/etc/prometheus/prometheus.yml
            - /volume3/prometheus/data/prometheus:/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
            - "--web.external-url=https://cyril.dongmaan.net/prometheus/"
            - "--storage.tsdb.retention.time=180d"
            - "--storage.tsdb.retention.size=1TB"

    alertmanager:
        depends_on:
            - reverseproxy
        image: prom/alertmanager
        #container_name: alertmanager
        restart: always
        #ports:
        #  - "9093:9093"
        volumes:
            - /volume3/prometheus/data/alertmanager:/alertmanager

    node-exporter:
        depends_on:
            - reverseproxy
        privileged: true
        image: prom/node-exporter
        #container_name: node-exporter
        restart: always
        #ports:
        #  - "9100:9100"
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - "--path.procfs=/host/proc"
            - "--path.sysfs=/host/sys"
            - "--collector.filesystem.ignored-mount-points"
            - "^/(rootfs/)?(dev|etc|host|proc|run|sys|volume1)($$|/)"

    unpoller:
       depends_on:
           - prometheus
           - grafana
       image: golift/unifi-poller
       restart: unless-stopped
       volumes:
           - /volume3/unpoller:/etc/unifi-poller

    bind-exporter:
       network_mode: "host"
       depends_on:
           - prometheus
           - grafana
       image: prometheuscommunity/bind-exporter
       restart: unless-stopped


    miniflux:
      image: ${MINIFLUX_IMAGE:-miniflux/miniflux:latest}
      container_name: miniflux
      restart: always
      #ports:
      #  - "8090:8080"
      depends_on:
        - db
      environment:
        - DATABASE_URL=${MF_DATABASE_URL}
        - BASE_URL=${MF_BASE_URL}
        - OAUTH2_PROVIDER=${MF_OAUTH2_PROVIDER}
        - OAUTH2_CLIENT_ID=${MF_OAUTH2_CLIENT_ID}
        - OAUTH2_CLIENT_SECRET=${MF_OAUTH2_CLIENT_SECRET}
        - OAUTH2_USER_CREATION=${MF_OAUTH2_USER_CREATION}
        - OAUTH2_REDIRECT_URL=${MF_OAUTH2_REDIRECT_URL}
        - DEBUG=1
      # Optional health check:
      # healthcheck:
      #  test: ["CMD", "/usr/bin/miniflux", "-healthcheck", "auto"]

    db:
      image: postgres:latest
      container_name: postgres
      environment:
        - POSTGRES_USER=${PG_POSTGRES_USER}
        - POSTGRES_PASSWORD=${PG_POSTGRES_PASSWORD}
      volumes:
        - miniflux-db:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "miniflux"]
        interval: 10s
        start_period: 30s

volumes:
  miniflux-db:
